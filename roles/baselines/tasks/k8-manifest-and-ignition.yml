---
# Because you must modify some cluster definition files and manually start the cluster machines, 
# you must generate the Kubernetes manifest and Ignition config files that the cluster needs to configure the machines.

# The installation configuration file transforms into the Kubernetes manifests. 
# The manifests wrap into the Ignition configuration files, which are later used to configure the cluster machines.

# Check warning about generation of certificates : https://docs.openshift.com/container-platform/4.10/installing/installing_aws/installing-aws-user-infra.html#installing-aws-user-infra

# The created install-config.yaml file will be used as input for this step.

- name: Generate the Kubernetes manifests for the cluster
  shell: "openshift-install create manifests --dir {{ openshift_build_dir }}"
  register: manifest

- debug:
    var: manifest["stdout_lines"]

- name: Remove the Kubernetes manifest files that define the control plane machines
  shell: "rm -f {{ openshift_build_dir }}/openshift/99_openshift-cluster-api_master-machines-*.yaml"

- name: Remove the Kubernetes manifest files that define the worker machines
  shell: "rm -f {{ openshift_build_dir }}/openshift/99_openshift-cluster-api_worker-machineset-*.yaml"

- name: Ensure mastersSchedulable in cluster-scheduler-02-config.yml = false
  template:
    src: cluster-scheduler-02-config.j2
    dest: "{{ openshift_build_dir }}/manifests/cluster-scheduler-02-config.yml"

# Optional: If you do not want the Ingress Operator to create DNS records on your behalf, remove the privateZone and 
# publicZone sections from the <installation_directory>/manifests/cluster-dns-02-config.yml DNS configuration file
- name: create the Ignition configuration files
  shell: "openshift-install create ignition-configs --dir {{ openshift_build_dir }}"

- debug:
    msg: 
      - "Ignition config files are created for the bootstrap, control plane, and compute nodes in the installation directory."
      - "The kubeadmin-password and kubeconfig files are created in the ./{{ openshift_build_dir }}/auth"

- shell: "tree {{ openshift_build_dir }}"
  register: structure

- debug:
    var: structure["stdout_lines"]

  